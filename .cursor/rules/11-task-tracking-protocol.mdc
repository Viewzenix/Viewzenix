---
description: Follow standardized task management protocols when tracking development work for clear progress monitoring
globs: ["**/*", ".project/tasks/**/*", ".project/kanban/**/*"]
alwaysApply: true
---

# Task Tracking Protocol

## 🔍 Overview
This rule defines the protocol for tracking and managing development tasks in the Viewzenix trading webhook platform, ensuring clear communication, prioritization, and progress tracking across the development process.

## 📋 Task Creation

### Task Structure
All tasks should follow this structure:

```
## [Task ID] Task Title

**Priority:** [Critical/High/Medium/Low]
**Type:** [Feature/Bug/Improvement/Refactor/Documentation]
**Assignee:** [Agent/Developer]
**Status:** [Backlog/Todo/In Progress/Review/Done]

### Description
Clear description of the task with context and requirements.

### Acceptance Criteria
- [ ] Criterion 1
- [ ] Criterion 2
- [ ] Criterion 3

### Related Tasks
- #TaskID1
- #TaskID2
```

### Task ID Format
Task IDs follow the format `VZX-[module]-[number]` where:
- `VZX` is the project prefix
- `[module]` is a 2-3 letter code for the module (FE=Frontend, BE=Backend, DOC=Documentation)
- `[number]` is a sequential number

Examples: `VZX-FE-001`, `VZX-BE-003`, `VZX-DOC-002`

### Task Priority Levels

| Priority | Description | Response Time |
|----------|-------------|---------------|
| Critical | Blocking issues, severe bugs | Immediate |
| High | Core functionality, important features | Within 24 hours |
| Medium | Standard features, non-critical bugs | Within sprint |
| Low | Nice-to-have features, minor improvements | When resources available |

## 🔄 Task Workflow

### Status Definitions

| Status | Definition | Next Steps |
|--------|------------|------------|
| Backlog | Task identified but not yet ready for development | Refine requirements and move to Todo |
| Todo | Task is ready for development | Assign to developer/agent and start work |
| In Progress | Work has started on the task | Complete development and testing |
| Review | Development complete, waiting for review | Review code/implementation and approve or request changes |
| Done | Task meets all acceptance criteria | Close task and update related documentation |

### Workflow Transitions

```mermaid
graph LR
    A[Backlog] --> B[Todo]
    B --> C[In Progress]
    C --> D[Review]
    D -- Approved --> E[Done]
    D -- Changes Needed --> C
```

## 📊 Task Management

### Prioritization Criteria
Tasks should be prioritized based on:
1. Business impact
2. Technical dependencies
3. Risk level
4. User value
5. Implementation complexity

### Task Estimation
- Use story points (1, 2, 3, 5, 8, 13) for relative estimation
- 1 point = simplest possible task (e.g., text change)
- 13 points = complex feature requiring multiple components

### Task Grouping
- **Epics**: Large bodies of work that can be broken down into multiple tasks
- **Sprints**: Time-boxed periods (typically 1-2 weeks) for completing a set of tasks
- **Milestones**: Key project checkpoints with specific deliverables

## 🗣️ Communication Protocol

### Status Updates
Provide regular updates on task progress:
- Mark subtasks as completed
- Update status when transitioning between stages
- Document any blockers or issues

### Blockers
When encountering a blocker:
1. Document the blocker in the task
2. Tag relevant team members
3. Provide context and potential solutions
4. Update when resolved

### Handoffs
When handing off a task:
1. Document current status
2. List completed and remaining work
3. Note any known issues
4. Provide context for the next developer

## 📝 Task Documentation

### Implementation Notes
- Document key implementation decisions
- Note any deviations from specifications
- Include links to relevant resources

### Testing Notes
- Document test approach
- List test cases
- Note any edge cases or limitations

### Review Checklist
- [ ] Code meets style guidelines
- [ ] All acceptance criteria met
- [ ] Tests written and passing
- [ ] Documentation updated
- [ ] No regression issues introduced

## 📊 Task Reporting

### Sprint Reporting
At the end of each sprint, generate a report with:
- Completed tasks
- Story points delivered
- Blockers encountered
- Lessons learned
- Next sprint planning

### Task Metrics
Track the following metrics:
- Cycle time (time from start to completion)
- Lead time (time from creation to completion)
- Estimation accuracy
- Bug escape rate

## 📁 Project Task Structure

Tasks and related project management files are organized in the `.project` directory with the following structure:

```
.project/
├── tasks/                  # Implementation tasks
│   ├── backend/            # Backend-specific tasks
│   │   ├── VZX-BE-001.md   # Individual task files
│   │   └── ...
│   └── frontend/           # Frontend-specific tasks
│       ├── VZX-FE-001.md   # Individual task files
│       └── ...
├── kanban/                 # Task tracking system
│   ├── board.md            # Active Kanban board
│   ├── archive/            # Historical sprint boards
│   │   ├── sprint-1.md     # Archived sprint 1 board
│   │   └── ...
│   └── templates/          # Templates for project artifacts
│       ├── task.md         # Task template
│       └── user-story.md   # User story template
└── stories/                # User stories organized by domain
    ├── backend/            # Backend-related user stories
    └── frontend/           # Frontend-related user stories
```

When working with tasks:
1. New tasks should be created in the appropriate directory under `.project/tasks/`
2. The Kanban board [board.md](mdc:.project/kanban/board.md) should be updated to reflect task status
3. Templates from `.project/kanban/templates/` should be used for consistency

## ✅ Verification Steps
When managing tasks, verify:

1. Task follows the standard structure with all required information
2. Priority is correctly assigned based on business impact and dependencies
3. Status updates are regular and accurate
4. Acceptance criteria are clear and testable
5. Related tasks are properly linked

## 🔗 Related Rules
[03-workflow-processes.mdc](mdc:.cursor/rules/03-workflow-processes.mdc)
[12-project-documentation-protocol.mdc](mdc:.cursor/rules/12-project-documentation-protocol.mdc)
