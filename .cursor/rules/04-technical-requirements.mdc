---
description: Implement core functional requirements to deliver complete trading webhook functionality
globs: ["**/*"]
alwaysApply: true
---
# Technical Requirements

## üîç Overview
This rule defines the technical requirements and functional specifications that must be implemented in the Viewzenix trading webhook platform, serving as a reference for both frontend and backend development teams.

## üéØ Core Functionality

### Webhook Processing

| Requirement | Description | Priority |
|-------------|-------------|----------|
| Alert Reception | Receive JSON alerts from TradingView via webhooks | Critical |
| Payload Validation | Validate incoming webhook payloads against schema | Critical |
| Parameter Parsing | Extract action parameters from payload | Critical |
| Error Handling | Provide clear error responses for invalid webhooks | High |

#### Webhook Schema Example

```json
{
  "passphrase": "your_secret_key",
  "ticker": "AAPL",
  "action": "BUY",
  "quantity": 10,
  "price": 150.50,
  "order_type": "MARKET",
  "stop_loss": 145.00,
  "take_profit": 160.00,
  "time_in_force": "DAY"
}
```

### Order Management

| Requirement | Description | Priority |
|-------------|-------------|----------|
| Order Placement | Submit orders to connected brokers | Critical |
| Order Tracking | Track the status of placed orders | High |
| Stop-Loss/Take-Profit | Implement automated SL/TP functionality | High |
| Order Cleanup | Automatically cancel orphaned orders | Medium |

### Broker Integration

| Requirement | Description | Priority |
|-------------|-------------|----------|
| Broker Adapters | API integration with Alpaca | Critical |
| Credential Management | Secure storage of broker API keys | Critical |
| Broker Restrictions | Handle broker-specific trading limitations | High |
| Multi-Broker Support | Support for multiple broker connections | Medium |

## üíª Frontend Requirements

### User Interface

| Screen | Required Components | Features |
|--------|---------------------|----------|
| Webhook Setup | Configuration form, passphrase generator, webhook URL display | Copy to clipboard, QR code generation |
| Brokers | Broker connection form, connection status indicator | Test connection, authorization flow |
| Bots | Bot configuration form, bot status toggles | Enable/disable bots, parameter customization |
| Logs | Log viewer with filtering | Real-time updates, search functionality, export logs |
| Analytics | Performance dashboard, trade history | Visualizations, metrics calculation |

### Technical Features

- Responsive design for desktop and tablet
- Real-time updates via WebSocket
- Dark/light theme support
- Local storage for user preferences
- Form validation with error messages
- Loading states for async operations

## ‚öôÔ∏è Backend Requirements

### API Endpoints

| Endpoint | Method | Purpose |
|----------|--------|---------|
| `/api/webhook` | POST | Receive TradingView alerts |
| `/api/orders` | GET, POST | Manage orders |
| `/api/brokers` | GET, POST, PUT, DELETE | Manage broker connections |
| `/api/bots` | GET, POST, PUT, DELETE | Manage bot configurations |
| `/api/status` | GET | System status and health checks |

### Services

| Service | Description | Key Functions |
|---------|-------------|--------------|
| Trade Classifier | Classifies assets and validates trading rules | Asset detection, broker restrictions |
| Order Engine | Core order processing logic | Order creation, modification, cancellation |
| SL/TP Service | Manages stop-loss and take-profit orders | SL/TP creation, tracking, adjustment |
| Cleanup Service | Manages orphaned orders | Identify and close orphaned orders |
| Global SL/TP | Tracks global stop-loss and take-profit levels | Apply global risk management |

### Performance Requirements

- Webhook processing < 500ms
- Support for up to 100 concurrent webhook requests
- Database query optimization for log retrieval
- Graceful handling of broker API rate limits

## üõ°Ô∏è Security Requirements

- HTTPS for all communications
- API key validation for webhook requests
- Secure storage of broker credentials (encrypted)
- Input validation for all API endpoints
- Rate limiting to prevent abuse
- Comprehensive error logging with PII protection

## üõ†Ô∏è Development Tools

| Tool | Purpose | Usage Context |
|------|---------|---------------|
| Supabase | Authentication, database, and serverless functions | Backend storage, user management, and API development |
| Framelink-Figma | Design asset integration | Frontend UI development and design system implementation |
| Stagehand | Browser automation and testing | End-to-end testing, validation, and workflow automation |
| Desktop Commander MCP | File operations and command execution | Required for all file system operations and terminal commands |

## ‚úÖ Verification Steps

When implementing features, verify:

1. The feature meets all specified requirements
2. Edge cases are properly handled
3. Performance meets the defined thresholds
4. Security considerations are addressed
5. The implementation is tested according to the testing guidelines
6. Documentation is updated to reflect the implementation

## üîó Related Rules
[01-directory-structure.mdc](mdc:.cursor/rules/01-directory-structure.mdc)
[02-coding-standards.mdc](mdc:.cursor/rules/02-coding-standards.mdc)
[03-workflow-processes.mdc](mdc:.cursor/rules/03-workflow-processes.mdc)
[05-glossary.mdc](mdc:.cursor/rules/05-glossary.mdc)
