---
description: Create standardized documentation following clear patterns to ensure project knowledge is accessible
globs: ["docs/**/*", "README.md", "*.md", ".project/docs/**/*"]
alwaysApply: true
---

# Project Documentation Protocol

## üîç Overview
This rule defines the standards for creating and maintaining documentation for the Viewzenix trading webhook platform. It ensures that documentation is comprehensive, up-to-date, and follows a consistent format across the project.

## üìö Documentation Structure

### Documentation Types

| Type | Purpose | Location |
|------|---------|----------|
| Technical Documentation | Code architecture, APIs, data models | `.project/docs/technical/`, `.project/docs/architecture/` |
| User Documentation | User guides, tutorials, FAQs | `.project/docs/user/` |
| API Documentation | API endpoints, request/response formats | `.project/docs/api/`, `.project/docs/specifications/` |
| Process Documentation | Development workflows, standards | `.project/docs/process/` |
| Project Documentation | Project overview, vision, roadmap | Project root, `.project/` |

### Standard Files

| File | Purpose | Required Elements |
|------|---------|-------------------|
| `README.md` | Project introduction | Overview, setup, usage, links |
| `ARCHITECTURE.md` | System architecture | Components, interactions, decisions |
| `API.md` | API documentation | Endpoints, parameters, examples |
| `CONTRIBUTING.md` | Contribution guide | Setup, workflow, standards |
| `CHANGELOG.md` | Version history | Released versions, changes |

## üìù Documentation Format

### Markdown Standards
All documentation should be written in Markdown following these standards:

- Use ATX-style headers (`# Header`) rather than underlines
- Use fenced code blocks with language indicators
- Include a table of contents for documents longer than 3 sections
- Use relative links for internal references

### File Structure

```
# Document Title

## Overview
Brief description of the document purpose.

## Table of Contents
- [Section 1](mdc:#section-1)
- [Section 2](mdc:#section-2)
- [Section 3](mdc:#section-3)

## Section 1
Content for section 1.

## Section 2
Content for section 2.

## Section 3
Content for section 3.

## Related Documentation
- [Related Doc 1](mdc:related-doc-1.md)
- [Related Doc 2](mdc:related-doc-2.md)
```

### Code Examples
Code examples should:
- Include the language identifier in fenced code blocks
- Be properly indented and formatted
- Include comments for complex logic
- Show both request and response for API examples

Example:
````
```javascript
// Function to process a webhook
function processWebhook(payload) {
  // Validate the payload
  if (!isValidPayload(payload)) {
    return { error: 'Invalid payload' };
  }
  
  // Process the payload
  const result = executeOrder(payload);
  
  return { success: true, orderId: result.id };
}
```
````

## üìã Technical Documentation

### Architecture Documentation
The `ARCHITECTURE.md` document should include:

- System overview diagram
- Component descriptions
- Data flow diagrams
- Technology stack details
- Design decisions and rationales
- Trade-offs and constraints

### API Documentation
API documentation should include:

```
## Endpoint: [METHOD] /path/to/endpoint

### Description
Brief description of what the endpoint does.

### Request Parameters

#### URL Parameters
| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| param1 | string | Yes | Description of param1 |
| param2 | number | No | Description of param2 |

#### Request Body
```json
{
  "property1": "value1",
  "property2": 123
}
```

### Response

#### Success Response (200 OK)
```json
{
  "id": "123",
  "status": "success",
  "data": {
    "property": "value"
  }
}
```

#### Error Response (400 Bad Request)
```json
{
  "error": "Invalid request",
  "message": "Description of the error"
}
```

### Examples

#### Example Request
```bash
curl -X POST https://api.viewzenix.com/webhook \
  -H "Content-Type: application/json" \
  -d '{"property1": "value1", "property2": 123}'
```

#### Example Response
```json
{
  "id": "123",
  "status": "success",
  "data": {
    "property": "value"
  }
}
```

### Code Documentation
For inline code documentation:

- Include docstrings for all functions, classes, and methods
- Document parameters, return values, and exceptions
- Explain complex algorithms or business logic
- Reference relevant documentation or issues

## üìñ User Documentation

### User Guide Structure
User guides should follow this structure:

1. **Introduction**: What the feature does and who it's for
2. **Prerequisites**: What the user needs before starting
3. **Step-by-step instructions**: Detailed steps with screenshots
4. **Examples**: Common use cases
5. **Troubleshooting**: Common issues and solutions
6. **Related features**: Links to related functionality

### Technical Levels
Provide documentation for different technical levels:

- **Beginner**: Detailed step-by-step with explanations
- **Intermediate**: Features and configurations
- **Advanced**: Custom configurations, integrations, optimizations

## üîÑ Documentation Maintenance

### Version Control
- Include version numbers in documentation files
- Tag documentation with applicable software versions
- Update documentation as part of the feature development process

### Documentation Review
Documentation should be reviewed for:
- Technical accuracy
- Completeness
- Clarity and readability
- Consistency with style guide
- Working examples and links

### Update Process
1. Identify documentation changes needed with code changes
2. Update documentation in the same PR as code changes
3. Have documentation reviewed alongside code review
4. Update relevant cross-references in other documents

## üìä Documentation Quality Metrics

### Completeness
- All required files exist
- All sections within files are completed
- All APIs and features are documented

### Accuracy
- Documentation matches current implementation
- Examples work as documented
- No outdated references or instructions

### Clarity
- Clear language and explanations
- Appropriate for target audience
- Proper use of examples and visual aids

## ‚úÖ Verification Steps
When creating or updating documentation, verify:

1. Documentation follows the standard format and structure
2. All required sections are included and complete
3. Code examples are current and working
4. Links to other documentation are valid
5. Technical accuracy has been reviewed by a subject matter expert

## üîó Related Rules
[03-workflow-processes.mdc](mdc:.cursor/rules/03-workflow-processes.mdc)
[11-task-tracking-protocol.mdc](mdc:.cursor/rules/11-task-tracking-protocol.mdc)
