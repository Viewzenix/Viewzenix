---
description: Apply core principles and architecture when developing any part of the Viewzenix trading platform
globs: ["**/*"]
alwaysApply: true
---

# Viewzenix Platform Introduction

## 🔍 Overview
This rule provides a high-level introduction to the Viewzenix trading webhook platform, establishing core principles, architecture concepts, and foundational guidelines that apply across the entire project.

## 🎯 Platform Purpose
Viewzenix is a trading webhook platform that enables automated trading by connecting TradingView alerts to broker APIs. The platform allows traders to:

1. Configure webhook endpoints to receive trading signals
2. Define automated trading rules and risk parameters
3. Connect to trading brokers like Alpaca
4. Monitor trading activity and performance
5. Manage multiple trading bots with different strategies

## 🏗️ System Architecture

The platform follows a client-server architecture:

```
┌─────────────────┐      ┌─────────────────┐      ┌─────────────────┐
│                 │      │                 │      │                 │
│   TradingView   │──►   │    Viewzenix    │──►   │  Broker APIs    │
│   (Alerts)      │      │    Platform     │      │  (Alpaca, etc.) │
│                 │      │                 │      │                 │
└─────────────────┘      └─────────────────┘      └─────────────────┘
                               │     ▲
                               │     │
                               ▼     │
                          ┌─────────────────┐
                          │                 │
                          │  Web Interface  │
                          │  (Dashboard)    │
                          │                 │
                          └─────────────────┘
```

### Key Components
- **Frontend**: React-based web application for configuration and monitoring
- **Backend**: Flask API server processing webhooks and managing orders
- **Database**: Storage for configuration, order history, and analytics
- **Integration Layer**: Adapters for different broker APIs

## 💡 Core Principles

### 1. Reliability and Determinism
- System behavior must be predictable and consistent
- Trading operations must execute reliably and as expected
- Error states must be clearly defined and handled gracefully

### 2. Security First
- All sensitive data must be properly encrypted
- Authentication and authorization for all operations
- Secure handling of API keys and trading credentials
- Input validation and sanitization throughout the system

### 3. User-Centric Design
- Clear, intuitive interface for all user operations
- Comprehensive feedback for all actions
- Accessibility considerations for all UI components
- Logical workflow that matches user expectations

### 4. Extensibility
- Modular design allowing for future expansion
- Clean separation of concerns between components
- Standardized interfaces for new broker integrations
- Well-documented APIs and extension points

### 5. Risk Management
- Built-in safeguards to prevent excessive losses
- Configurable risk parameters at multiple levels
- Clear visualization of risk exposure
- Failsafes and circuit breakers for abnormal market conditions

## 🔄 Development Methodology

### Iterative Development
- Feature development follows an iterative approach
- Regular releases with incremental improvements
- Continuous feedback integration

### Test-Driven Development
- All critical components must have comprehensive tests
- Automated testing for core functionality
- End-to-end testing for critical user journeys

### Code Quality
- Code reviews for all significant changes
- Adherence to established coding standards
- Regular refactoring to maintain code quality
- Documentation as a first-class citizen

## 🚀 Getting Started

For developers new to the project:

1. Read the directory structure guide ([01-directory-structure.mdc](mdc:.cursor/rules/01-directory-structure.mdc))
2. Review the coding standards ([02-coding-standards.mdc](mdc:.cursor/rules/02-coding-standards.mdc) )
3. Set up your development environment 
4. Follow the workflow processes ([03-workflow-processes.mdc](mdc:.cursor/rules/03-workflow-processes.mdc))

For specific implementation guidelines:
- Frontend developers should refer to [06-frontend-rules.mdc](mdc:.cursor/rules/06-frontend-rules.mdc)
- Backend developers should refer to [07-backend-rules.mdc](mdc:.cursor/rules/07-backend-rules.mdc)
- Both should review the technical requirements ([04-technical-requirements.mdc](mdc:.cursor/rules/04-technical-requirements.mdc))

## ✅ Verification Steps
When implementing new features or modifications, verify:

1. The work aligns with the core principles outlined above
2. The implementation matches the architectural patterns
3. Code adheres to established standards and practices
4. Documentation is updated to reflect changes
5. Tests verify both functionality and edge cases

## 🔗 Related Rules
[01-directory-structure.mdc](mdc:.cursor/rules/01-directory-structure.mdc)
[02-coding-standards.mdc](mdc:.cursor/rules/02-coding-standards.mdc)
[04-technical-requirements.mdc](mdc:.cursor/rules/04-technical-requirements.mdc)
